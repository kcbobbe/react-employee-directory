{"version":3,"sources":["components/Employee.js","components/Table.js","components/Jumbo.js","App.js","serviceWorker.js","index.js"],"names":["Employee","scope","this","props","employee","id","firstName","lastName","className","onClick","filterDepartments","department","address","street","city","state","zip","React","Component","Table","employees","newEmployeeArray","filter","setState","allEmployees","param","direction","sort","a","b","console","log","buttonStyles","fontSize","border","padding","style","sortEmployees","allDepartments","bind","map","key","Jumbo","App","fetch","then","response","json","res","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0edfab7e.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Employee extends React.Component {\n  render() {\n    return(\n        <tbody>\n          <tr>\n            <th scope=\"row\">{this.props.employee.id}</th>\n            <td>{this.props.employee.firstName} {this.props.employee.lastName}</td>\n            <td >\n              <button className=\"btn btn-sm btn-outline-secondary\"\n              onClick={() => this.props.filterDepartments(this.props.employee.department)}>\n                {this.props.employee.department}</button>\n            </td>\n            <td>{this.props.employee.address.street}, {this.props.employee.address.city} {this.props.employee.address.state}, {this.props.employee.address.zip}</td>\n          </tr>\n        </tbody>\n    )\n  }\n}\n\nexport default Employee","import React from \"react\";\nimport Employee from \"./Employee\"\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      employees: this.props.employees,\n    }\n}\n\n  filterDepartments(department){\n    let newEmployeeArray = this.props.employees.filter(employee => employee.department === department);\n    this.setState({\n      employees: newEmployeeArray\n    })\n  }\n\n  allDepartments(){\n    let allEmployees = this.props.employees\n    this.setState({\n      employees: allEmployees\n    })\n  }\n\n  sortEmployees(param, direction){\n    let newEmployeeArray = this.state.employees\n    if (direction === \"up\"){\n      newEmployeeArray.sort((a, b) => (a[param] > b[param]) ? 1 : -1)\n    } else (\n      newEmployeeArray.sort((a, b) => (a[param] < b[param]) ? 1 : -1)\n    )\n\n  this.setState({\n     employees: newEmployeeArray\n    })\n  }\n  render() {\n    console.log(this.state.employees)\n    const buttonStyles = {\n      fontSize: \".5em\",\n      border: \"none\",\n      padding: \".2em\",\n    };\n    return(\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">\n              #\n              <button className=\"btn btn-link m-1\" style={buttonStyles} onClick={() => this.sortEmployees(\"id\", \"up\")}>\n                <i className=\"fa fa-arrow-up\"></i>\n              </button>\n              <button className=\"btn btn-link m-1\" style={buttonStyles} onClick={() => this.sortEmployees(\"id\", \"down\")}>\n                <i className=\"fa fa-arrow-down\"></i>\n              </button>\n              </th>\n            <th scope=\"col\">\n              Name\n              <button className=\"btn btn-link m-1\" style={buttonStyles} onClick={() => this.sortEmployees(\"lastName\", \"up\")}>\n                <i className=\"fa fa-arrow-up\"></i>\n              </button>\n              <button className=\"btn btn-link m-1\" style={buttonStyles} onClick={() => this.sortEmployees(\"lastName\", \"down\")} >\n                <i className=\"fa fa-arrow-down\"></i>\n              </button>\n            </th>\n            <th scope=\"col\">\n              Department\n            <button className=\"btn btn-link\" onClick={this.allDepartments.bind(this)}>View All</button>\n              {/* <button className=\"btn btn-sm btn-outline-secondary m-1\" style={buttonStyles} onClick={() => this.sortEmployees(\"department\", \"up\")} >\n                <i className=\"fa fa-arrow-up\"></i>\n              </button>\n              <button className=\"btn btn-sm btn-outline-secondary m-1\" style={buttonStyles} onClick={() => this.sortEmployees(\"department\", \"down\")}> */}\n                {/* <i className=\"fa fa-arrow-down\"></i>\n              </button> */}\n            </th>\n            <th>\n              Address\n            </th>\n          </tr>\n        </thead>\n        {this.state.employees.map(employee => (\n          <Employee key={employee.id} employee={employee} filterDepartments={this.filterDepartments.bind(this)}/>\n        ))}\n        </table>\n\n    )\n  }\n}\n\nexport default Table","import React from \"react\";\n\nclass Jumbo extends React.Component {\n  render() {\n    return(\n      <div className=\"jumbotron jumbotron-fluid\">\n        <div className=\"container\">\n          <h1 className=\"display-4\">Employee Directory</h1>\n          <p className=\"lead\">Click the arrows to sort by ID, last name, or department. Click on a department to filter by department. Click on the 'view all' button to view all departments.</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Jumbo\n\n","import React from 'react';\nimport Table from \"./components/Table\"\nimport Jumbo from \"./components/Jumbo\"\nimport './App.css';\n// import employees from \"./employees.json\"\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      employees: []\n    }\n    console.log(\"constructed\")\n  }\n\n\n  componentDidMount(){\n    console.log(\"mounted\")\n    fetch(\"https://alper.dev/employees\")\n      .then(response => {\n        return response.json()\n      })\n      .then(res => {\n        // console.log(employees)\n        this.setState({employees: res })\n      })\n    }\n\nrender() {\n  console.log(\"rendered\")\n  // console.log('state', this.state.employees[0])\n  if(!this.state.employees[0]) {\n    return (\n      <>\n        <Jumbo />\n        <h3>Loading...</h3>\n      </>\n    )\n  }else {\n    return (\n    <>\n      <Jumbo />\n      <div className=\"container\">\n        <Table employees={this.state.employees} />\n      </div>\n    </>\n    )\n  }\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}